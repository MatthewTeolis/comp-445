#!/bin/python

from httpclient.argparser.ArgParser import ArgParser
from httpclient.http.HttpClient import is_redirect, send_request
from httpclient.http.HttpRequest import HttpRequest
from httpclient.http.HttpResponse import HttpResponse
from httpclient.util.converter import convert_list_headers_to_dictionary
from httpclient.util.parser import parse_url, parse_response


def get_data(args):
    if args.d is None:
        with open(args.f, 'r') as file:
            data = file.read()
        return data
    else:
        return args.d


def print_or_write(body, args):
    if args.o is None:
        print(body)
    else:
        with open(args.o, 'w') as file:
            file.write(body)
        if args.v:
            print(f"** Wrote {len(body)} bytes of data to '{args.o}'")


def log_request(request: HttpRequest):
    print('Request:')
    print(('> ' + str(request)).replace('\r\n', '\r\n> '))


def log_response(response: HttpResponse):
    print('Response:')
    print('< ' + response.get_status_line())
    print('< ' + response.stringify_headers().replace('\r\n', '\r\n< ') + '\r\n< ')


def perform_request(request: HttpRequest, verbose):
    request.headers['Host'] = request.host

    if verbose:
        log_request(request)

    response_string = send_request(request.host, request.port, str(request))
    response = parse_response(response_string)

    if verbose:
        log_response(response)

    return response


def get(request: HttpRequest, verbose):
    return perform_request(request, verbose)


def post(request: HttpRequest, verbose):
    request.headers['Content-Length'] = len(request.data)

    return perform_request(request, verbose)


def handle_redirects(request: HttpRequest):
    while True:
        response = get(request, args.v)

        if is_redirect(response.code):
            location = response.headers.get('Location')
            (_, redirect_host, redirect_port, redirect_path) = parse_url(location)
            if redirect_host != '':
                request.host = redirect_host
            request.port = redirect_port
            request.path = redirect_path
        else:
            break

    return response


def show_help(args, parser):
    if args.method == 'get':
        parser.get_get_parser().print_help()
    elif args.method == 'post':
        parser.get_post_parser().print_help()
    else:
        parser.print_help()


if __name__ == '__main__':
    parser = ArgParser()
    args = parser.parse_args()

    if args.command == 'get':
        (_, host, port, path) = parse_url(args.URL)

        request = HttpRequest(host, port, 'GET', path, convert_list_headers_to_dictionary(args.h))

        response = handle_redirects(request)

        print_or_write(response.body, args)

    elif args.command == 'post':
        (_, host, port, path) = parse_url(args.URL)
        data = get_data(args)

        request = HttpRequest(host, port, 'POST', path, convert_list_headers_to_dictionary(args.h), data)

        response = handle_redirects(request)

        print_or_write(response.body, args)

    elif args.command == 'help':
        show_help(args, parser)

    else:
        parser.print_help()
